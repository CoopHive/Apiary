digraph "classes_coophive" {
rankdir=BT
charset="utf-8"
"coophive.agent.Agent" [color="#77AADD", fontcolor="black", label=<{Agent|current_deals : dict[str, Deal]<br ALIGN="LEFT"/>current_matched_offers : list<br ALIGN="LEFT"/>deals_finished_in_current_step : list<br ALIGN="LEFT"/>events : list<br ALIGN="LEFT"/>local_information<br ALIGN="LEFT"/>policy<br ALIGN="LEFT"/>private_key : str<br ALIGN="LEFT"/>public_key : str<br ALIGN="LEFT"/>smart_contract : NoneType<br ALIGN="LEFT"/>|connect_to_smart_contract(smart_contract)<br ALIGN="LEFT"/>create_new_match_offer(match)<br ALIGN="LEFT"/>handle_solver_event(event)<br ALIGN="LEFT"/>update_finished_deals()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.buyer.Buyer" [color="#77AADD", fontcolor="black", label=<{Buyer|current_deals : dict[str, Deal]<br ALIGN="LEFT"/>current_jobs : deque<br ALIGN="LEFT"/>|handle_server_messages()<br ALIGN="LEFT"/>handle_smart_contract_event(event: Event)<br ALIGN="LEFT"/>pay_compute_node(event: Event)<br ALIGN="LEFT"/>request_mediation(event: Event)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.agent.CID" [color="#77AADD", fontcolor="black", label=<{CID|data : dict<br ALIGN="LEFT"/>hash : str<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"coophive.data_attribute.DataAttribute" [color="#77AADD", fontcolor="black", label=<{DataAttribute|data : dict<br ALIGN="LEFT"/>data_attributes : dict<br ALIGN="LEFT"/>id : NoneType, str<br ALIGN="LEFT"/>|add_data(data_field: str, data_value)<br ALIGN="LEFT"/>get_data()<br ALIGN="LEFT"/>get_id()<br ALIGN="LEFT"/>set_id()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.deal.Deal" [color="#77AADD", fontcolor="black", label=<{Deal|data_attributes : set<br ALIGN="LEFT"/>|get_data()<br ALIGN="LEFT"/>set_attributes(attributes)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.event.Event" [color="#77AADD", fontcolor="black", label=<{Event|data<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|get_data()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.agent.IPFS" [color="#77AADD", fontcolor="black", label=<{IPFS|data : dict<br ALIGN="LEFT"/>|add(data)<br ALIGN="LEFT"/>get(cid_hash)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.job_offer.JobOffer" [color="#77AADD", fontcolor="black", label=<{JobOffer|data_attributes<br ALIGN="LEFT"/>|calculate_T_accept()<br ALIGN="LEFT"/>calculate_T_reject()<br ALIGN="LEFT"/>get_data()<br ALIGN="LEFT"/>set_attributes(attributes)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.agent.LocalInformation" [color="#77AADD", fontcolor="black", label=<{LocalInformation|block_number : int<br ALIGN="LEFT"/>buyers : dict<br ALIGN="LEFT"/>directories : dict<br ALIGN="LEFT"/>ipfs<br ALIGN="LEFT"/>job_offers : dict[str, JobOffer]<br ALIGN="LEFT"/>mediators : dict<br ALIGN="LEFT"/>resource_offers : dict[str, ResourceOffer]<br ALIGN="LEFT"/>sellers : dict<br ALIGN="LEFT"/>solvers : dict<br ALIGN="LEFT"/>|add_job_offer(id: str, data)<br ALIGN="LEFT"/>add_resource_offer(id: str, data)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.machine.Machine" [color="#77AADD", fontcolor="black", label=<{Machine|data_attributes : set<br ALIGN="LEFT"/>static_uuid : int<br ALIGN="LEFT"/>uuid : int<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"coophive.match.Match" [color="#77AADD", fontcolor="black", label=<{Match|buyer_signed : bool<br ALIGN="LEFT"/>data_attributes : set<br ALIGN="LEFT"/>rounds_completed : int<br ALIGN="LEFT"/>seller_signed : bool<br ALIGN="LEFT"/>|add_data(data_field, data_value)<br ALIGN="LEFT"/>get_data()<br ALIGN="LEFT"/>set_attributes(attributes)<br ALIGN="LEFT"/>sign_buyer()<br ALIGN="LEFT"/>sign_seller()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.policy.Policy" [color="#77AADD", fontcolor="black", label=<{Policy|policy_name : str<br ALIGN="LEFT"/>public_key : str<br ALIGN="LEFT"/>|calculate_benefit(match)<br ALIGN="LEFT"/>calculate_cost(match)<br ALIGN="LEFT"/>calculate_revenue(match)<br ALIGN="LEFT"/>calculate_utility_buyer(match)<br ALIGN="LEFT"/>calculate_utility_seller(match)<br ALIGN="LEFT"/>evaluate_match(match)<br ALIGN="LEFT"/>find_best_match(job_offer_id)<br ALIGN="LEFT"/>infer(input_message: dict)<br ALIGN="LEFT"/>load_states()<br ALIGN="LEFT"/>negotiate_match(match, max_rounds)<br ALIGN="LEFT"/><I>train</I>()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.resource_offer.ResourceOffer" [color="#77AADD", fontcolor="black", label=<{ResourceOffer|data_attributes<br ALIGN="LEFT"/>|calculate_T_accept()<br ALIGN="LEFT"/>calculate_T_reject()<br ALIGN="LEFT"/>get_data()<br ALIGN="LEFT"/>set_attributes(attributes)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.result.Result" [color="#77AADD", fontcolor="black", label=<{Result|data_attributes : set<br ALIGN="LEFT"/>|get_data()<br ALIGN="LEFT"/>set_attributes(attributes)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.seller.Seller" [color="#77AADD", fontcolor="black", label=<{Seller|<br ALIGN="LEFT"/>|create_result(deal_id)<br ALIGN="LEFT"/>handle_client_messages(client_socket)<br ALIGN="LEFT"/>handle_completed_job(deal_id)<br ALIGN="LEFT"/>handle_smart_contract_event(event)<br ALIGN="LEFT"/>post_result(result: Result, tx: Tx)<br ALIGN="LEFT"/>update_finished_deals()<br ALIGN="LEFT"/>update_job_running_times()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.smart_contract.SmartContract" [color="#77AADD", fontcolor="black", label=<{SmartContract|balance : int<br ALIGN="LEFT"/>balances : dict<br ALIGN="LEFT"/>deals : dict[str, Deal]<br ALIGN="LEFT"/>event_handlers : list<br ALIGN="LEFT"/>events : list<br ALIGN="LEFT"/>matches_made_in_current_step : list[Match]<br ALIGN="LEFT"/>public_key : str<br ALIGN="LEFT"/>results_posted_in_current_step : list<br ALIGN="LEFT"/>transactions : list<br ALIGN="LEFT"/>|agree_to_match(match: Match, tx: Tx)<br ALIGN="LEFT"/>ask_consortium_of_mediators(event: Event)<br ALIGN="LEFT"/>ask_random_mediator(event: Event)<br ALIGN="LEFT"/>emit_event(event: Event)<br ALIGN="LEFT"/>mediate_result(event: Event, result: Result, tx: Tx)<br ALIGN="LEFT"/>post_buyer_payment(result: Result, tx: Tx)<br ALIGN="LEFT"/>post_result(result: Result, tx: Tx)<br ALIGN="LEFT"/>slash_cheating_collateral(event: Event, result: Result)<br ALIGN="LEFT"/>subscribe_event(handler)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.solver.Solver" [color="#77AADD", fontcolor="black", label=<{Solver|current_matched_resource_offers : set<br ALIGN="LEFT"/>currently_matched_job_offers : set<br ALIGN="LEFT"/>deals_made_in_current_step : dict[str, Deal]<br ALIGN="LEFT"/>machine_keys : list<br ALIGN="LEFT"/>|add_necessary_match_data(match: Match)<br ALIGN="LEFT"/>create_match(job_offer: JobOffer, resource_offer: ResourceOffer): Match<br ALIGN="LEFT"/>handle_smart_contract_event(event: Event)<br ALIGN="LEFT"/>match_job_offer(job_offer: JobOffer)<br ALIGN="LEFT"/>remove_outdated_offers()<br ALIGN="LEFT"/>solve()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.utils.Tx" [color="#77AADD", fontcolor="black", label=<{Tx|sender : str<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"coophive.validator.Validator" [color="#77AADD", fontcolor="black", label=<{Validator|<br ALIGN="LEFT"/>|verify_result()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.buyer.Buyer" -> "coophive.agent.Agent" [arrowhead="empty", arrowtail="none"];
"coophive.deal.Deal" -> "coophive.data_attribute.DataAttribute" [arrowhead="empty", arrowtail="none"];
"coophive.job_offer.JobOffer" -> "coophive.data_attribute.DataAttribute" [arrowhead="empty", arrowtail="none"];
"coophive.machine.Machine" -> "coophive.data_attribute.DataAttribute" [arrowhead="empty", arrowtail="none"];
"coophive.match.Match" -> "coophive.data_attribute.DataAttribute" [arrowhead="empty", arrowtail="none"];
"coophive.resource_offer.ResourceOffer" -> "coophive.data_attribute.DataAttribute" [arrowhead="empty", arrowtail="none"];
"coophive.result.Result" -> "coophive.data_attribute.DataAttribute" [arrowhead="empty", arrowtail="none"];
"coophive.seller.Seller" -> "coophive.agent.Agent" [arrowhead="empty", arrowtail="none"];
"coophive.solver.Solver" -> "coophive.agent.Agent" [arrowhead="empty", arrowtail="none"];
"coophive.validator.Validator" -> "coophive.agent.Agent" [arrowhead="empty", arrowtail="none"];
}
