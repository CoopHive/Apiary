digraph "classes_coophive" {
rankdir=BT
charset="utf-8"
"coophive.agent.Agent" [color="#77AADD", fontcolor="black", label=<{Agent|current_deals : dict[str, Deal]<br ALIGN="LEFT"/>current_jobs : dict<br ALIGN="LEFT"/>current_matched_offers : list<br ALIGN="LEFT"/>deals_finished_in_current_step : list<br ALIGN="LEFT"/>event_handlers : list<br ALIGN="LEFT"/>events : list<br ALIGN="LEFT"/>local_information<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>public_key : Optional[str]<br ALIGN="LEFT"/>smart_contract : NoneType<br ALIGN="LEFT"/>solver : NoneType<br ALIGN="LEFT"/>solver_url : NoneType, str<br ALIGN="LEFT"/>|communicate_request_to_party(match_offer)<br ALIGN="LEFT"/>connect_to_smart_contract(smart_contract)<br ALIGN="LEFT"/>connect_to_solver(url: str, solver)<br ALIGN="LEFT"/>create_new_match_offer(match)<br ALIGN="LEFT"/>emit_event(event: Event)<br ALIGN="LEFT"/>get_events()<br ALIGN="LEFT"/>get_local_information()<br ALIGN="LEFT"/>get_public_key()<br ALIGN="LEFT"/>get_solver()<br ALIGN="LEFT"/>handle_solver_event(event)<br ALIGN="LEFT"/>negotiate_match(match, max_rounds)<br ALIGN="LEFT"/>reject_match(match)<br ALIGN="LEFT"/>simulate_communication(match_offer)<br ALIGN="LEFT"/>subscribe_event(handler)<br ALIGN="LEFT"/>update_finished_deals()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.utils.AgentType" [color="#77AADD", fontcolor="black", label=<{AgentType|name<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"coophive.utils.CID" [color="#77AADD", fontcolor="black", label=<{CID|data : dict<br ALIGN="LEFT"/>hash : str<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"coophive.client.Client" [color="#77AADD", fontcolor="black", label=<{Client|client_socket : NoneType, socket<br ALIGN="LEFT"/>current_deals : dict[str, Deal]<br ALIGN="LEFT"/>current_jobs : deque<br ALIGN="LEFT"/>server_address : tuple<br ALIGN="LEFT"/>|add_job(job: Job)<br ALIGN="LEFT"/>calculate_benefit(match)<br ALIGN="LEFT"/>calculate_cost(match)<br ALIGN="LEFT"/>calculate_utility(match: Match)<br ALIGN="LEFT"/>client_loop()<br ALIGN="LEFT"/>decide_whether_or_not_to_mediate(event: Event)<br ALIGN="LEFT"/>find_best_match(job_offer_id)<br ALIGN="LEFT"/>get_jobs()<br ALIGN="LEFT"/><I>handle_p2p_event</I>(event: Event)<br ALIGN="LEFT"/>handle_server_messages()<br ALIGN="LEFT"/>handle_smart_contract_event(event: Event)<br ALIGN="LEFT"/>make_match_decision(match, algorithm)<br ALIGN="LEFT"/>pay_compute_node(event: Event)<br ALIGN="LEFT"/>request_mediation(event: Event)<br ALIGN="LEFT"/>start_client_socket()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.data_attribute.DataAttribute" [color="#77AADD", fontcolor="black", label=<{DataAttribute|data : dict<br ALIGN="LEFT"/>data_attributes : dict<br ALIGN="LEFT"/>id : NoneType, str<br ALIGN="LEFT"/>|add_data(data_field: str, data_value)<br ALIGN="LEFT"/>get_data()<br ALIGN="LEFT"/>get_id()<br ALIGN="LEFT"/>set_id()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.deal.Deal" [color="#77AADD", fontcolor="black", label=<{Deal|data_attributes : set<br ALIGN="LEFT"/>|get_data()<br ALIGN="LEFT"/>set_attributes(attributes)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.event.Event" [color="#77AADD", fontcolor="black", label=<{Event|data<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>|get_data()<br ALIGN="LEFT"/>get_name()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.utils.IPFS" [color="#77AADD", fontcolor="black", label=<{IPFS|data : dict<br ALIGN="LEFT"/>|add(data)<br ALIGN="LEFT"/>get(cid_hash)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.job.Job" [color="#77AADD", fontcolor="black", label=<{Job|requirements : NoneType<br ALIGN="LEFT"/>|get_job_requirements()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.job_offer.JobOffer" [color="#77AADD", fontcolor="black", label=<{JobOffer|data_attributes<br ALIGN="LEFT"/>|calculate_T_accept()<br ALIGN="LEFT"/>calculate_T_reject()<br ALIGN="LEFT"/>get_data()<br ALIGN="LEFT"/>set_attributes(attributes)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.agent.LocalInformation" [color="#77AADD", fontcolor="black", label=<{LocalInformation|block_number : int<br ALIGN="LEFT"/>clients : dict<br ALIGN="LEFT"/>directories : dict<br ALIGN="LEFT"/>ipfs<br ALIGN="LEFT"/>job_offers : dict[str, JobOffer]<br ALIGN="LEFT"/>mediators : dict<br ALIGN="LEFT"/>resource_offers : dict[str, ResourceOffer]<br ALIGN="LEFT"/>resource_providers : dict<br ALIGN="LEFT"/>solvers : dict<br ALIGN="LEFT"/>|add_agent(agent_type: AgentType, public_key: str, agent: Agent)<br ALIGN="LEFT"/>add_client(client)<br ALIGN="LEFT"/>add_job_offer(id: str, data)<br ALIGN="LEFT"/>add_resource_offer(id: str, data)<br ALIGN="LEFT"/>add_resource_provider(resource_provider)<br ALIGN="LEFT"/>get_clients()<br ALIGN="LEFT"/>get_job_offers()<br ALIGN="LEFT"/>get_list_of_agents(agent_type: AgentType)<br ALIGN="LEFT"/>get_resource_offers()<br ALIGN="LEFT"/>get_resource_providers()<br ALIGN="LEFT"/>remove_agent(agent_type: AgentType, public_key: str)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.machine.Machine" [color="#77AADD", fontcolor="black", label=<{Machine|data_attributes : set<br ALIGN="LEFT"/>static_uuid : int<br ALIGN="LEFT"/>uuid : int<br ALIGN="LEFT"/>|get_machine_uuid()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.match.Match" [color="#77AADD", fontcolor="black", label=<{Match|client_signed : bool<br ALIGN="LEFT"/>data_attributes : set<br ALIGN="LEFT"/>resource_provider_signed : bool<br ALIGN="LEFT"/>|add_data(data_field, data_value)<br ALIGN="LEFT"/>get_client_signed()<br ALIGN="LEFT"/>get_data()<br ALIGN="LEFT"/>get_resource_provider_signed()<br ALIGN="LEFT"/>set_attributes(attributes)<br ALIGN="LEFT"/>sign_client()<br ALIGN="LEFT"/>sign_resource_provider()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.resource_offer.ResourceOffer" [color="#77AADD", fontcolor="black", label=<{ResourceOffer|data_attributes<br ALIGN="LEFT"/>|calculate_T_accept()<br ALIGN="LEFT"/>calculate_T_reject()<br ALIGN="LEFT"/>get_data()<br ALIGN="LEFT"/>set_attributes(attributes)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.resource_provider.ResourceProvider" [color="#77AADD", fontcolor="black", label=<{ResourceProvider|docker_client : DockerClient<br ALIGN="LEFT"/>docker_password : str<br ALIGN="LEFT"/>docker_username : str<br ALIGN="LEFT"/>machines : dict<br ALIGN="LEFT"/>server_socket : NoneType, socket<br ALIGN="LEFT"/>|accept_clients()<br ALIGN="LEFT"/>add_machine(machine_id: CID, machine: Machine)<br ALIGN="LEFT"/>calculate_revenue(match)<br ALIGN="LEFT"/>calculate_utility(match)<br ALIGN="LEFT"/>create_result(deal_id)<br ALIGN="LEFT"/>evaluate_match(match)<br ALIGN="LEFT"/>find_best_match(resource_offer_id)<br ALIGN="LEFT"/>get_machines()<br ALIGN="LEFT"/>handle_client_messages(client_socket)<br ALIGN="LEFT"/>handle_completed_job(deal_id)<br ALIGN="LEFT"/><I>handle_p2p_event</I>(event)<br ALIGN="LEFT"/>handle_smart_contract_event(event)<br ALIGN="LEFT"/>login_to_docker()<br ALIGN="LEFT"/>make_match_decision(match, policy)<br ALIGN="LEFT"/>post_result(result: Result, tx: Tx)<br ALIGN="LEFT"/>remove_machine(machine_id)<br ALIGN="LEFT"/>resource_provider_loop()<br ALIGN="LEFT"/>start_server_socket()<br ALIGN="LEFT"/>update_finished_deals()<br ALIGN="LEFT"/>update_job_running_times()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.result.Result" [color="#77AADD", fontcolor="black", label=<{Result|data_attributes : set<br ALIGN="LEFT"/>|get_data()<br ALIGN="LEFT"/>set_attributes(attributes)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.smart_contract.SmartContract" [color="#77AADD", fontcolor="black", label=<{SmartContract|balance : int<br ALIGN="LEFT"/>balances : dict<br ALIGN="LEFT"/>deals : dict[str, Deal]<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>matches_made_in_current_step : list[Match]<br ALIGN="LEFT"/>results_posted_in_current_step : list<br ALIGN="LEFT"/>transactions : list<br ALIGN="LEFT"/>|agree_to_match(match: Match, tx: Tx)<br ALIGN="LEFT"/>ask_consortium_of_mediators(event: Event)<br ALIGN="LEFT"/>ask_random_mediator(event: Event)<br ALIGN="LEFT"/>fund(tx: Tx)<br ALIGN="LEFT"/>mediate_result(event: Event, result: Result, tx: Tx)<br ALIGN="LEFT"/>post_client_payment(result: Result, tx: Tx)<br ALIGN="LEFT"/>post_result(result: Result, tx: Tx)<br ALIGN="LEFT"/>refund_cheating_collateral(result: Result)<br ALIGN="LEFT"/>slash_cheating_collateral(event: Event, result: Result)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.solver.Solver" [color="#77AADD", fontcolor="black", label=<{Solver|current_matched_resource_offers : set<br ALIGN="LEFT"/>currently_matched_job_offers : set<br ALIGN="LEFT"/>deals_made_in_current_step : dict[str, Deal]<br ALIGN="LEFT"/>logger : NoneType, RootLogger<br ALIGN="LEFT"/>machine_keys : list<br ALIGN="LEFT"/>smart_contract : NoneType<br ALIGN="LEFT"/>url : str<br ALIGN="LEFT"/>|<I>add_deal_to_smart_contract</I>(deal: Deal)<br ALIGN="LEFT"/>add_necessary_match_data(match: Match)<br ALIGN="LEFT"/>create_match(job_offer: JobOffer, resource_offer: ResourceOffer): Match<br ALIGN="LEFT"/>get_url()<br ALIGN="LEFT"/>handle_smart_contract_event(event: Event)<br ALIGN="LEFT"/>match_job_offer(job_offer: JobOffer)<br ALIGN="LEFT"/>remove_outdated_offers()<br ALIGN="LEFT"/>solve()<br ALIGN="LEFT"/>solver_cleanup()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"coophive.utils.Tx" [color="#77AADD", fontcolor="black", label=<{Tx|sender : str<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"coophive.client.Client" -> "coophive.agent.Agent" [arrowhead="empty", arrowtail="none"];
"coophive.deal.Deal" -> "coophive.data_attribute.DataAttribute" [arrowhead="empty", arrowtail="none"];
"coophive.job_offer.JobOffer" -> "coophive.data_attribute.DataAttribute" [arrowhead="empty", arrowtail="none"];
"coophive.machine.Machine" -> "coophive.data_attribute.DataAttribute" [arrowhead="empty", arrowtail="none"];
"coophive.match.Match" -> "coophive.data_attribute.DataAttribute" [arrowhead="empty", arrowtail="none"];
"coophive.resource_offer.ResourceOffer" -> "coophive.data_attribute.DataAttribute" [arrowhead="empty", arrowtail="none"];
"coophive.resource_provider.ResourceProvider" -> "coophive.agent.Agent" [arrowhead="empty", arrowtail="none"];
"coophive.result.Result" -> "coophive.data_attribute.DataAttribute" [arrowhead="empty", arrowtail="none"];
"coophive.smart_contract.SmartContract" -> "coophive.agent.Agent" [arrowhead="empty", arrowtail="none"];
"coophive.solver.Solver" -> "coophive.agent.Agent" [arrowhead="empty", arrowtail="none"];
"coophive.agent.LocalInformation" -> "coophive.agent.Agent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="local_information", style="solid"];
"coophive.utils.IPFS" -> "coophive.agent.LocalInformation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ipfs", style="solid"];
}
